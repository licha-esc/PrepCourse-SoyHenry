JS:
lenguaje de tipado dinámico (no se necesita declarar y establecer un tipo específico de variables) por lo cual es más sencillo. 
Técnicamente es un lenguaje de programación interpretado, por lo que no es necsario compilar los programas para ejecutarlos.


Operadores de comparación:

= operador de asignación
== operador de igualdad. Verifica que coincida el tipo de valor.
=== operador de igualdad estricta. Verifica que coincida tanto el tipo de valor como el tipo de dato .

3 == 3; true
3 === 3; true
3 == '3'; true
3 === '3'; false


Asociatividad:
var a = 1;
var b = 2;
var c = a = b;

Para entender cómo se evalúa esta expresión, es importante comprender la asociatividad y precedencia de los operadores de asignación en JavaScript.
En JavaScript, el operador de asignación (=) tiene una asociatividad de derecha a izquierda, lo que significa que se evalúa de derecha a izquierda cuando hay múltiples operadores de asignación en una expresión.
 
Ahora, desglosemos la expresión var c = a = b;:

Comienza con la asignación más a la derecha: a = b;. Esto asigna el valor de b a la variable a.
Luego, toma el resultado de esa asignación (b) y lo asigna a la variable c.
Por lo tanto, después de ejecutar esa línea de código, las variables tendrán los siguientes valores:

a tendrá el valor de b (que es 2).
b se mantiene con su valor original (2).
c también tendrá el valor de b (que es 2).
Esencialmente, la expresión var c = a = b; está asignando el valor de b a las variables a, b, y c. Recuerda que la expresión se evalúa de derecha a izquierda debido a la asociatividad de los operadores de asignación.


Funciones: hay 3 formas

// PRIMERO

function sumaTres(x) {
    return x + 3;
}

// SEGUNDO: En este caso la función se asigna a una variable

var sumaTres = (x) {
    return x + 3;
}


// TERCERO: guardar función dentro de una variable. En este caso tmb se utiliza una sintáxis de función flecha

var sumaTres = (x) => {
    return x + 3;
}


Las funciones terminan en el return. todas las instrucciones debajo del return no son leidas.


Objeto Math

Math.pow:

Nos permite potenciar un número. Por ejemplo, 2 elevado al cubo, sería igual a multioplicar 2 x 2 x 2. Es decir, 8.
El primer número es la base y el segundo será la potencia.
Math.pow(2, 3); // 8


Math.round & Math.floor & Math.ceil:

A veces necesitamos redondear un número decimal, ya que muchas veces las operaciones matemáticas pueden resultar en números con coma. Para esto, JavaScript nos ofrece tres métodos

Math.round
readondeará el número decimal al entero más próximo. Es decir que, si tenemos 0.49, el resultado será 0. En cambio, si tenemos 0.50, el resultado será 1.
Math.round(0.49); // 0
Math.round(0.50); // 1

Math.floor
redondeará el número decimal al entero de menor valor. Por ejemplo, si tenemos el número 5.93, el resultado será 5.
Math.floor(5.93); // 5

Math.ceil
este método, al contrario que el anterior, redondeará un número al siguiente entero. Por ejemplo, si tenemos 3.27 el resultado será 4.


IF/ELSE:
El else me ahora que se sigan evaluando los otros if.
Math.ceil(3.27); // 4


Math.max & Math.min:
Estos dos métodos nos permitirán conocer el valor máximo o mínimo de un conjunto de números. Por ejemplo, si tenemos los números 1, 2, 3, 4 y 5, el máximo será el 5 y el mñínimo el número 1.
Math.max(1, 2, 3, 4, 5); // 5
Math.min(1, 2, 3, 4, 5); // 1


Math.random:
permite generar un número aleatorio. Es importante tener encuenta que el número que se generará es decimal, y puede ser cualquiera entre el 0 y el 1. 
Math.random(); // 0.9280584754129286


BUCLES:

for: 
es una estructura de control que permite repetir un bloque de código un nº determinado de veces. Se utiliza cuando conocemos de antemano la cantidad exacta de pasos que queremos ejecutar.

for (incialización; condición; incremento/decremento) {
    // Código a ejecutar en cada iteración.
}

se compone de 3 valores: 
1-inicialización: variable de iteración. La variable se inicializa en el valor que se le asigne.
2-condición: si es verdadera el bloque de código dentro del bucle se seguirá ejecutándo. Si es falsa se detiene. 
3-actualización: instrucción para decidir que se debe hacer con la variable de iteración cada vez que termina de ejecutarse cada ciclo.

var suma = 0;
for (var i=0 ; i<10 ; i++) {
    suma = suma +1;
    console.log(suma);
}


while: 
se utiliza cuando no conocemos de antemano la cantidad exacta de pasos necesarios para finalizar la ejecución.

while (contición) {
    // Código a ejecutar mientras la condición sea verdadera. 
}

let contador = 0;
while (contador < 5) {
    // Código a ejecutar mientras contador sea menor que 5.
    contador++;
}   



do-while:
Se ejecuta una sentencia especificada hasta que la condición de comprobación se evalúa como falso. 



